name: Release Notes to Confluence Publisher
author: Gershon Alvais & Solid State Networks
description: Update a change log page in Confluence with the latest release notes.
branding:
  icon: "book"
  color: "red"

inputs:
  # Confluence configs
  email:
    description: Confluence email
    required: true
    type: string
  api_token:
    description: Confluence API Token
    required: true
    type: string
  host:
    description: Confluence host name
    required: true
    type: string
  space_key:
    description: Confluence space key
    required: true
    type: string
  page_id:
    description: Page ID of the existing Confluence page to update.
    required: true
    type: string
  status:
    required: false
    type: string
    default: current
  title:
    description: Title of the page to update.
    required: true
    type: string
  # Release notes
  repository:
    Description: Github repository slug to get release notes from.
    required: true
    type: string
  tag:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Install markdown to HTML converter
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc

    - name: Get Release
      id: get-release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ inputs.tag }}';
          const [owner, repo] = '${{ inputs.repository }}'.split('/');
          const release = await github.rest.repos.getReleaseByTag({owner, repo, tag});
          if (!release || !release.data.body) {
              console.error('Invalid release');
              return;
          }
          console.log(release.data.body);
          return {
              body: release.data.body,
              url: `https://github.com/${{ inputs.repository }}/releases/tag/${tag}`
          };

    - name: Get Space ID
      shell: bash
      run: |
        response=$(curl --request GET \
            --url "https://${{ inputs.host }}/wiki/rest/api/space/${{ inputs.space_key }}" \
            --user '${{ inputs.email }}:${{ inputs.api_token }}' \
            --header 'Accept: application/json')
        echo "Response: $response"
        spaceId=$(echo "$response" | jq -r '.id')
        if [ "$spaceId" == "null" ]; then
          echo "Failed to fetch space id"
          exit 1
        fi
        echo "spaceId=$spaceId" >> $GITHUB_ENV

    - name: Get Current Page Version
      shell: bash
      run: |
        response=$(curl --request GET \
            --url 'https://${{ inputs.host }}/wiki/api/v2/pages/${{ inputs.page_id }}' \
            --user '${{ inputs.email }}:${{ inputs.api_token }}' \
            --header 'Accept: application/json')
        echo "Response: $response"
        currentVersion=$(echo "$response" | jq -r '.version.number')
        if [ "$currentVersion" == "null" ]; then
          echo "Failed to fetch current page version"
          exit 1
        fi
        nextVersion=$((currentVersion + 1))
        echo "nextVersion=$nextVersion" >> $GITHUB_ENV

    - name: Post Release Notes to Confluence
      id: post_to_confluence
      shell: bash
      env:
        RELEASE_NOTES: ${{ fromJSON(steps.get-release.outputs.result).body }}
        RELEASE_URL: ${{ fromJSON(steps.get-release.outputs.result).url }}
      run: |
        # Add additional line before the content
        RELEASE_NOTES="# [${{ inputs.tag }}](${RELEASE_URL})\n$(date)\n\n${RELEASE_NOTES}"

        # Reduce size of headings
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed 's/## /### /g')

        # Replace @username with a link to the user's GitHub profile
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/@([^ ]+)/[@\1](https:\/\/github.com\/\1)/g')

        # Convert bare PR links to [#number](url)
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's@https://github.com/([^/]+)/([^/]+)/pull/([0-9]+)@[#\3](\0)@g')
        
        # Convert bare full change log links to [url](url)
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's@https://github.com/([^/]+)/([^/]+)/compare/([^/]+)@[\0](\0)@g')

        # Convert Markdown links [text](url) to Confluence format [text|url]
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/[\1|\2]/g')

        # Convert markdown to HTML
        echo "${RELEASE_NOTES}" > release_notes.md
        pandoc -f markdown -t html release_notes.md -o release_notes.html

        # Convert HTML links to Confluence storage format [text|url]
        sed -i -E 's#<a href="([^"]+)"[^>]*>([^<]+)</a>#[\2|\1]#g' release_notes.html

        # Read the HTML content into a variable
        html_content=$(<release_notes.html)

        response=$(curl --request GET \
            --url 'https://${{ inputs.host }}/wiki/rest/api/content/${{ inputs.page_id }}?expand=body.storage' \
            --user '${{ inputs.email }}:${{ inputs.api_token }}' \
            --header 'Accept: application/json')
        echo "Response: $response"
        existing_content=$(echo "$response" | jq -r '.body.storage.value')
        if [ "$existing_content" == "null" ]; then
          $existing_content=""
        fi

        # Prepare the payload
        payload=$(jq -n \
        --arg spaceId "${{ env.spaceId }}" \
        --argjson pageId "${{ inputs.page_id }}" \
        --argjson version "${{ env.nextVersion }}" \
        --arg status "${{ inputs.status }}" \
        --arg title "${{ inputs.title }}" \
        --arg value "${html_content}${existing_content}" \
        '{
            "spaceId": $spaceId,
            "id": $pageId,
            "version": {
              "number": $version
            },
            "status": $status,
            "title": $title,
            "body": {
              "representation": "storage",
              "value": $value
            }
        }'
        )

        echo "Payload: $payload"
        response=$(curl --request PUT \
            --url 'https://${{ inputs.host }}/wiki/api/v2/pages/${{ inputs.page_id }}' \
            --user '${{ inputs.email }}:${{ inputs.api_token }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data "$payload")
        echo "Response: $response"
        responseId=$(echo "$response" | jq -r '.id')
        echo "Response Page ID: $responseId"
        if [ "$responseId" == "null" ]; then
          echo "Failed to update page"
          exit 1
        fi
